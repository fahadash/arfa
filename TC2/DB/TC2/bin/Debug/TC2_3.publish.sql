/*
Deployment script for TC2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TC2"
:setvar DefaultFilePrefix "TC2"
:setvar DefaultDataPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Card]...';


GO
CREATE TABLE [dbo].[Card] (
    [CardId]    INT           IDENTITY (1, 1) NOT NULL,
    [CardName]  VARCHAR (100) NOT NULL,
    [CardAlias] VARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([CardId] ASC)
);


GO
PRINT N'Creating [dbo].[GameResult]...';


GO
CREATE TABLE [dbo].[GameResult] (
    [TableId]      INT NOT NULL,
    [WinnerUserId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([WinnerUserId] ASC, [TableId] ASC)
);


GO
PRINT N'Creating [dbo].[GameScore]...';


GO
CREATE TABLE [dbo].[GameScore] (
    [TableId] INT NOT NULL,
    [UserId]  INT NOT NULL,
    [Score]   INT NOT NULL,
    PRIMARY KEY CLUSTERED ([TableId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[Table]...';


GO
CREATE TABLE [dbo].[Table] (
    [TableId]     INT      NOT NULL,
    [OwnerUserId] INT      NOT NULL,
    [Created]     DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([TableId] ASC)
);


GO
PRINT N'Creating [dbo].[TableState]...';


GO
CREATE TABLE [dbo].[TableState] (
    [TableId] INT NOT NULL,
    [UserId]  INT NOT NULL,
    [CardId]  INT NOT NULL,
    PRIMARY KEY CLUSTERED ([CardId] ASC, [UserId] ASC, [TableId] ASC)
);


GO
PRINT N'Creating [dbo].[TableUser]...';


GO
CREATE TABLE [dbo].[TableUser] (
    [TableId] INT NOT NULL,
    [UserId]  INT NOT NULL,
    CONSTRAINT [PK_TableUser] PRIMARY KEY CLUSTERED ([TableId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [UserId]    INT          IDENTITY (1, 1) NOT NULL,
    [Username]  VARCHAR (50) NOT NULL,
    [Password]  VARCHAR (50) NOT NULL,
    [Firstname] VARCHAR (50) NULL,
    [Lastname]  VARCHAR (50) NULL,
    [Age]       INT          NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [UQ_User_Username] UNIQUE NONCLUSTERED ([Username] ASC)
);


GO
PRINT N'Creating [dbo].[UserTableInventory]...';


GO
CREATE TABLE [dbo].[UserTableInventory] (
    [UserId]  INT NOT NULL,
    [TableId] INT NOT NULL,
    [CardId]  INT NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC, [CardId] ASC, [TableId] ASC)
);


GO
PRINT N'Creating Default Constraint on [dbo].[Table]....';


GO
ALTER TABLE [dbo].[Table]
    ADD DEFAULT GETDATE() FOR [Created];


GO
PRINT N'Creating FK_GameResult_ToTable...';


GO
ALTER TABLE [dbo].[GameResult]
    ADD CONSTRAINT [FK_GameResult_ToTable] FOREIGN KEY ([TableId]) REFERENCES [dbo].[Table] ([TableId]);


GO
PRINT N'Creating FK_GameResult_ToUser...';


GO
ALTER TABLE [dbo].[GameResult]
    ADD CONSTRAINT [FK_GameResult_ToUser] FOREIGN KEY ([WinnerUserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating FK_GameScore_Table...';


GO
ALTER TABLE [dbo].[GameScore]
    ADD CONSTRAINT [FK_GameScore_Table] FOREIGN KEY ([TableId]) REFERENCES [dbo].[Table] ([TableId]);


GO
PRINT N'Creating FK_GameScore_User...';


GO
ALTER TABLE [dbo].[GameScore]
    ADD CONSTRAINT [FK_GameScore_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating FK_User_Table...';


GO
ALTER TABLE [dbo].[Table]
    ADD CONSTRAINT [FK_User_Table] FOREIGN KEY ([OwnerUserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating FK_TableState_ToTable...';


GO
ALTER TABLE [dbo].[TableState]
    ADD CONSTRAINT [FK_TableState_ToTable] FOREIGN KEY ([TableId]) REFERENCES [dbo].[Table] ([TableId]);


GO
PRINT N'Creating FK_TableState_ToUser...';


GO
ALTER TABLE [dbo].[TableState]
    ADD CONSTRAINT [FK_TableState_ToUser] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating FK_TableState_ToCard...';


GO
ALTER TABLE [dbo].[TableState]
    ADD CONSTRAINT [FK_TableState_ToCard] FOREIGN KEY ([CardId]) REFERENCES [dbo].[Card] ([CardId]);


GO
PRINT N'Creating FK_TableUser_ToTable...';


GO
ALTER TABLE [dbo].[TableUser]
    ADD CONSTRAINT [FK_TableUser_ToTable] FOREIGN KEY ([TableId]) REFERENCES [dbo].[Table] ([TableId]);


GO
PRINT N'Creating FK_TableUser_ToUser...';


GO
ALTER TABLE [dbo].[TableUser]
    ADD CONSTRAINT [FK_TableUser_ToUser] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating FK_UserTableInventory_User...';


GO
ALTER TABLE [dbo].[UserTableInventory]
    ADD CONSTRAINT [FK_UserTableInventory_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating FK_UserTableInventory_Table...';


GO
ALTER TABLE [dbo].[UserTableInventory]
    ADD CONSTRAINT [FK_UserTableInventory_Table] FOREIGN KEY ([TableId]) REFERENCES [dbo].[Table] ([TableId]);


GO
PRINT N'Creating FK_UserTableInventory_Card...';


GO
ALTER TABLE [dbo].[UserTableInventory]
    ADD CONSTRAINT [FK_UserTableInventory_Card] FOREIGN KEY ([CardId]) REFERENCES [dbo].[Card] ([CardId]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5c8edb02-8ed4-4c28-b016-07f43f78b75d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5c8edb02-8ed4-4c28-b016-07f43f78b75d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6019705c-957f-4256-b080-df0ede1663ed')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6019705c-957f-4256-b080-df0ede1663ed')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '24de124a-37df-42f8-ab4a-68acf386a41b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('24de124a-37df-42f8-ab4a-68acf386a41b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7707f6ca-0536-4d8e-8b93-d170156996db')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7707f6ca-0536-4d8e-8b93-d170156996db')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5829bf58-7c1a-4102-84f3-21367a2f231a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5829bf58-7c1a-4102-84f3-21367a2f231a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '61d138a6-81c1-4cca-bf07-f5cd87c5829b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('61d138a6-81c1-4cca-bf07-f5cd87c5829b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '25fc53c8-ed38-4050-b2f9-1be40b5fe5ef')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('25fc53c8-ed38-4050-b2f9-1be40b5fe5ef')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4ef2d59a-bae6-40d8-b5c0-a02c04c0fdbe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4ef2d59a-bae6-40d8-b5c0-a02c04c0fdbe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9b3c988b-5093-47b5-8e82-a1d9f435c859')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9b3c988b-5093-47b5-8e82-a1d9f435c859')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd4e30a04-452f-441e-b5fe-42658d04e658')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d4e30a04-452f-441e-b5fe-42658d04e658')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '171422a7-86b2-417e-92e8-dcac5663c9d7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('171422a7-86b2-417e-92e8-dcac5663c9d7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '00d69a92-39e1-4012-9771-165473271a7d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('00d69a92-39e1-4012-9771-165473271a7d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0850bb23-a6bb-4a03-b6aa-39432a73e52c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0850bb23-a6bb-4a03-b6aa-39432a73e52c')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM Card
GO

SET IDENTITY_INSERT [dbo].[Card] ON 

GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (2, N'Ace of Spades', N'AS')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (3, N'Ace of Clubs', N'AC')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (4, N'Ace of Hearts', N'AH')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (5, N'Ace of Diamonds', N'AD')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (6, N'King of Spades', N'KS')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (7, N'King of Clubs', N'KC')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (8, N'King of Hearts', N'KH')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (9, N'King of Diamonds', N'KD')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (10, N'Queen of Spades', N'QS')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (11, N'Queen of Clubs', N'QC')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (12, N'Queen of Hearts', N'QH')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (13, N'Queen of Diamonds', N'QD')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (14, N'Jack of Spades', N'JS')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (15, N'Jack of Clubs', N'JC')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (16, N'Jack of Hearts', N'JH')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (17, N'Jack of Diamonds', N'JD')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (18, N'10 of Spades', N'10S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (19, N'10 of Clubs', N'10C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (20, N'10 of Hearts', N'10H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (21, N'10 of Diamonds', N'10D')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (22, N'9 of Spades', N'9S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (23, N'9 of Clubs', N'9C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (24, N'9 of Hearts', N'9H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (25, N'9 of Diamonds', N'9D')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (26, N'8 of Spades', N'8S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (27, N'8 of Clubs', N'8C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (28, N'8 of Hearts', N'8H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (29, N'8 of Diamonds', N'8D')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (30, N'7 of Spades', N'7S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (31, N'7 of Clubs', N'7C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (32, N'7 of Hearts', N'7H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (33, N'7 of Diamonds', N'7D')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (34, N'6 of Spades', N'6S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (35, N'6 of Clubs', N'6C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (36, N'6 of Hearts', N'6H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (37, N'6 of Diamonds', N'6D')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (38, N'5 of Spades', N'5S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (39, N'5 of Clubs', N'5C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (40, N'5 of Hearts', N'5H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (41, N'5 of Diamonds', N'5D')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (42, N'4 of Spades', N'4S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (43, N'4 of Clubs', N'4C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (44, N'4 of Hearts', N'4H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (45, N'4 of Diamonds', N'4D')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (46, N'3 of Spades', N'3S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (47, N'3 of Clubs', N'3C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (48, N'3 of Hearts', N'3H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (49, N'3 of Diamonds', N'3D')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (50, N'2 of Spades', N'2S')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (51, N'2 of Clubs', N'2C')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (52, N'2 of Hearts', N'2H')
GO
INSERT [dbo].[Card] ([CardId], [CardName], [CardAlias]) VALUES (53, N'2 of Diamonds', N'2D')
GO
SET IDENTITY_INSERT [dbo].[Card] OFF
GO

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
