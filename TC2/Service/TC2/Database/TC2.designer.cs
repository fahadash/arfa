#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TC2.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TC2")]
	public partial class TC2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCard(Card instance);
    partial void UpdateCard(Card instance);
    partial void DeleteCard(Card instance);
    partial void InsertUserTableInventory(UserTableInventory instance);
    partial void UpdateUserTableInventory(UserTableInventory instance);
    partial void DeleteUserTableInventory(UserTableInventory instance);
    partial void InsertGameResult(GameResult instance);
    partial void UpdateGameResult(GameResult instance);
    partial void DeleteGameResult(GameResult instance);
    partial void InsertGameScore(GameScore instance);
    partial void UpdateGameScore(GameScore instance);
    partial void DeleteGameScore(GameScore instance);
    partial void InsertTableState(TableState instance);
    partial void UpdateTableState(TableState instance);
    partial void DeleteTableState(TableState instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertTableUserCard(TableUserCard instance);
    partial void UpdateTableUserCard(TableUserCard instance);
    partial void DeleteTableUserCard(TableUserCard instance);
    partial void InsertTableUser(TableUser instance);
    partial void UpdateTableUser(TableUser instance);
    partial void DeleteTableUser(TableUser instance);
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    #endregion
		
		public TC2DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TC2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TC2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TC2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TC2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TC2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Card> Cards
		{
			get
			{
				return this.GetTable<Card>();
			}
		}
		
		public System.Data.Linq.Table<UserTableInventory> UserTableInventories
		{
			get
			{
				return this.GetTable<UserTableInventory>();
			}
		}
		
		public System.Data.Linq.Table<GameResult> GameResults
		{
			get
			{
				return this.GetTable<GameResult>();
			}
		}
		
		public System.Data.Linq.Table<GameScore> GameScores
		{
			get
			{
				return this.GetTable<GameScore>();
			}
		}
		
		public System.Data.Linq.Table<TableState> TableStates
		{
			get
			{
				return this.GetTable<TableState>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<TableUserCard> TableUserCards
		{
			get
			{
				return this.GetTable<TableUserCard>();
			}
		}
		
		public System.Data.Linq.Table<TableUser> TableUsers
		{
			get
			{
				return this.GetTable<TableUser>();
			}
		}
		
		public System.Data.Linq.Table<Table> Tables
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_RegisterUser")]
		public ISingleResult<usp_RegisterUserResult> RegisterUser([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="VarChar(100)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="VarChar(100)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Firstname", DbType="VarChar(100)")] string firstname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lastname", DbType="VarChar(100)")] string lastname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Age", DbType="Int")] System.Nullable<int> age)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, password, firstname, lastname, age);
			return ((ISingleResult<usp_RegisterUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_ChangePassword")]
		public ISingleResult<usp_ChangePasswordResult> ChangePassword([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Username", DbType="VarChar(100)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CurrentPassword", DbType="VarChar(100)")] string currentPassword, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewPassword", DbType="VarChar(100)")] string newPassword)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, currentPassword, newPassword);
			return ((ISingleResult<usp_ChangePasswordResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_ListJoinableTables")]
		public ISingleResult<usp_ListJoinableTablesResult> ListJoinableTables([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LoginToken", DbType="UniqueIdentifier")] System.Nullable<System.Guid> loginToken)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginToken);
			return ((ISingleResult<usp_ListJoinableTablesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_ListUserTables")]
		public ISingleResult<usp_ListUserTablesResult> ListUserTables([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LoginToken", DbType="UniqueIdentifier")] System.Nullable<System.Guid> loginToken)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginToken);
			return ((ISingleResult<usp_ListUserTablesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_CreateTable")]
		public ISingleResult<usp_CreateTableResult> CreateTable([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LoginToken", DbType="UniqueIdentifier")] System.Nullable<System.Guid> loginToken, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(100)")] string tableName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginToken, tableName);
			return ((ISingleResult<usp_CreateTableResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_SuspendTable")]
		public int SuspendTable([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LoginToken", DbType="UniqueIdentifier")] System.Nullable<System.Guid> loginToken, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableId", DbType="Int")] System.Nullable<int> tableId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginToken, tableId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_JoinTable")]
		public int JoinTable([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LoginToken", DbType="UniqueIdentifier")] System.Nullable<System.Guid> loginToken, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableId", DbType="Int")] System.Nullable<int> tableId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginToken, tableId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetTableTimestamp")]
		public ISingleResult<usp_GetTableTimestampResult> GetTableTimestamp([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LoginToken", DbType="UniqueIdentifier")] System.Nullable<System.Guid> loginToken, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableId", DbType="Int")] System.Nullable<int> tableId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginToken, tableId);
			return ((ISingleResult<usp_GetTableTimestampResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_LogIn")]
		public ISingleResult<usp_LogInResult> LogIn([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Username", DbType="VarChar(100)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="VarChar(100)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, password);
			return ((ISingleResult<usp_LogInResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_ListTablesUserIsOn")]
		public ISingleResult<usp_ListTablesUserIsOnResult> ListTablesUserIsOn([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LoginToken", DbType="UniqueIdentifier")] System.Nullable<System.Guid> loginToken)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginToken);
			return ((ISingleResult<usp_ListTablesUserIsOnResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Card")]
	public partial class Card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardId;
		
		private string _CardName;
		
		private string _CardAlias;
		
		private EntitySet<UserTableInventory> _UserTableInventories;
		
		private EntitySet<TableState> _TableStates;
		
		private EntitySet<TableUserCard> _TableUserCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardIdChanging(int value);
    partial void OnCardIdChanged();
    partial void OnCardNameChanging(string value);
    partial void OnCardNameChanged();
    partial void OnCardAliasChanging(string value);
    partial void OnCardAliasChanged();
    #endregion
		
		public Card()
		{
			this._UserTableInventories = new EntitySet<UserTableInventory>(new Action<UserTableInventory>(this.attach_UserTableInventories), new Action<UserTableInventory>(this.detach_UserTableInventories));
			this._TableStates = new EntitySet<TableState>(new Action<TableState>(this.attach_TableStates), new Action<TableState>(this.detach_TableStates));
			this._TableUserCards = new EntitySet<TableUserCard>(new Action<TableUserCard>(this.attach_TableUserCards), new Action<TableUserCard>(this.detach_TableUserCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CardId
		{
			get
			{
				return this._CardId;
			}
			set
			{
				if ((this._CardId != value))
				{
					this.OnCardIdChanging(value);
					this.SendPropertyChanging();
					this._CardId = value;
					this.SendPropertyChanged("CardId");
					this.OnCardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CardName
		{
			get
			{
				return this._CardName;
			}
			set
			{
				if ((this._CardName != value))
				{
					this.OnCardNameChanging(value);
					this.SendPropertyChanging();
					this._CardName = value;
					this.SendPropertyChanged("CardName");
					this.OnCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardAlias", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CardAlias
		{
			get
			{
				return this._CardAlias;
			}
			set
			{
				if ((this._CardAlias != value))
				{
					this.OnCardAliasChanging(value);
					this.SendPropertyChanging();
					this._CardAlias = value;
					this.SendPropertyChanged("CardAlias");
					this.OnCardAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_UserTableInventory", Storage="_UserTableInventories", ThisKey="CardId", OtherKey="CardId")]
		public EntitySet<UserTableInventory> UserTableInventories
		{
			get
			{
				return this._UserTableInventories;
			}
			set
			{
				this._UserTableInventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_TableState", Storage="_TableStates", ThisKey="CardId", OtherKey="CardId")]
		public EntitySet<TableState> TableStates
		{
			get
			{
				return this._TableStates;
			}
			set
			{
				this._TableStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_TableUserCard", Storage="_TableUserCards", ThisKey="CardId", OtherKey="CardId")]
		public EntitySet<TableUserCard> TableUserCards
		{
			get
			{
				return this._TableUserCards;
			}
			set
			{
				this._TableUserCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTableInventories(UserTableInventory entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_UserTableInventories(UserTableInventory entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
		
		private void attach_TableStates(TableState entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_TableStates(TableState entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
		
		private void attach_TableUserCards(TableUserCard entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_TableUserCards(TableUserCard entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTableInventory")]
	public partial class UserTableInventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _TableId;
		
		private int _CardId;
		
		private EntityRef<Card> _Card;
		
		private EntityRef<User> _User;
		
		private EntityRef<Table> _Table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnCardIdChanging(int value);
    partial void OnCardIdChanged();
    #endregion
		
		public UserTableInventory()
		{
			this._Card = default(EntityRef<Card>);
			this._User = default(EntityRef<User>);
			this._Table = default(EntityRef<Table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CardId
		{
			get
			{
				return this._CardId;
			}
			set
			{
				if ((this._CardId != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardIdChanging(value);
					this.SendPropertyChanging();
					this._CardId = value;
					this.SendPropertyChanged("CardId");
					this.OnCardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_UserTableInventory", Storage="_Card", ThisKey="CardId", OtherKey="CardId", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.UserTableInventories.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.UserTableInventories.Add(this);
						this._CardId = value.CardId;
					}
					else
					{
						this._CardId = default(int);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserTableInventory", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserTableInventories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserTableInventories.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_UserTableInventory", Storage="_Table", ThisKey="TableId", OtherKey="TableId", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.UserTableInventories.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.UserTableInventories.Add(this);
						this._TableId = value.TableId;
					}
					else
					{
						this._TableId = default(int);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameResult")]
	public partial class GameResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableId;
		
		private int _WinnerUserId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Table> _Table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnWinnerUserIdChanging(int value);
    partial void OnWinnerUserIdChanged();
    #endregion
		
		public GameResult()
		{
			this._User = default(EntityRef<User>);
			this._Table = default(EntityRef<Table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerUserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WinnerUserId
		{
			get
			{
				return this._WinnerUserId;
			}
			set
			{
				if ((this._WinnerUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWinnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._WinnerUserId = value;
					this.SendPropertyChanged("WinnerUserId");
					this.OnWinnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GameResult", Storage="_User", ThisKey="WinnerUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GameResults.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GameResults.Add(this);
						this._WinnerUserId = value.UserId;
					}
					else
					{
						this._WinnerUserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_GameResult", Storage="_Table", ThisKey="TableId", OtherKey="TableId", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.GameResults.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.GameResults.Add(this);
						this._TableId = value.TableId;
					}
					else
					{
						this._TableId = default(int);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameScore")]
	public partial class GameScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableId;
		
		private int _UserId;
		
		private int _Score;
		
		private EntityRef<User> _User;
		
		private EntityRef<Table> _Table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    #endregion
		
		public GameScore()
		{
			this._User = default(EntityRef<User>);
			this._Table = default(EntityRef<Table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GameScore", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GameScores.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GameScores.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_GameScore", Storage="_Table", ThisKey="TableId", OtherKey="TableId", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.GameScores.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.GameScores.Add(this);
						this._TableId = value.TableId;
					}
					else
					{
						this._TableId = default(int);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableState")]
	public partial class TableState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableId;
		
		private int _UserId;
		
		private int _CardId;
		
		private EntityRef<Card> _Card;
		
		private EntityRef<User> _User;
		
		private EntityRef<Table> _Table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCardIdChanging(int value);
    partial void OnCardIdChanged();
    #endregion
		
		public TableState()
		{
			this._Card = default(EntityRef<Card>);
			this._User = default(EntityRef<User>);
			this._Table = default(EntityRef<Table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CardId
		{
			get
			{
				return this._CardId;
			}
			set
			{
				if ((this._CardId != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardIdChanging(value);
					this.SendPropertyChanging();
					this._CardId = value;
					this.SendPropertyChanged("CardId");
					this.OnCardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_TableState", Storage="_Card", ThisKey="CardId", OtherKey="CardId", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.TableStates.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.TableStates.Add(this);
						this._CardId = value.CardId;
					}
					else
					{
						this._CardId = default(int);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TableState", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TableStates.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TableStates.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_TableState", Storage="_Table", ThisKey="TableId", OtherKey="TableId", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.TableStates.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.TableStates.Add(this);
						this._TableId = value.TableId;
					}
					else
					{
						this._TableId = default(int);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Username;
		
		private string _Password;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private System.Nullable<int> _Age;
		
		private System.Nullable<System.Guid> _Token;
		
		private System.Nullable<System.DateTime> _TokenLastHit;
		
		private EntitySet<UserTableInventory> _UserTableInventories;
		
		private EntitySet<GameResult> _GameResults;
		
		private EntitySet<GameScore> _GameScores;
		
		private EntitySet<TableState> _TableStates;
		
		private EntitySet<TableUser> _TableUsers;
		
		private EntitySet<Table> _Tables;
		
		private EntitySet<Table> _Tables1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnTokenChanging(System.Nullable<System.Guid> value);
    partial void OnTokenChanged();
    partial void OnTokenLastHitChanging(System.Nullable<System.DateTime> value);
    partial void OnTokenLastHitChanged();
    #endregion
		
		public User()
		{
			this._UserTableInventories = new EntitySet<UserTableInventory>(new Action<UserTableInventory>(this.attach_UserTableInventories), new Action<UserTableInventory>(this.detach_UserTableInventories));
			this._GameResults = new EntitySet<GameResult>(new Action<GameResult>(this.attach_GameResults), new Action<GameResult>(this.detach_GameResults));
			this._GameScores = new EntitySet<GameScore>(new Action<GameScore>(this.attach_GameScores), new Action<GameScore>(this.detach_GameScores));
			this._TableStates = new EntitySet<TableState>(new Action<TableState>(this.attach_TableStates), new Action<TableState>(this.detach_TableStates));
			this._TableUsers = new EntitySet<TableUser>(new Action<TableUser>(this.attach_TableUsers), new Action<TableUser>(this.detach_TableUsers));
			this._Tables = new EntitySet<Table>(new Action<Table>(this.attach_Tables), new Action<Table>(this.detach_Tables));
			this._Tables1 = new EntitySet<Table>(new Action<Table>(this.attach_Tables1), new Action<Table>(this.detach_Tables1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(50)")]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(50)")]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenLastHit", DbType="DateTime")]
		public System.Nullable<System.DateTime> TokenLastHit
		{
			get
			{
				return this._TokenLastHit;
			}
			set
			{
				if ((this._TokenLastHit != value))
				{
					this.OnTokenLastHitChanging(value);
					this.SendPropertyChanging();
					this._TokenLastHit = value;
					this.SendPropertyChanged("TokenLastHit");
					this.OnTokenLastHitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserTableInventory", Storage="_UserTableInventories", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserTableInventory> UserTableInventories
		{
			get
			{
				return this._UserTableInventories;
			}
			set
			{
				this._UserTableInventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GameResult", Storage="_GameResults", ThisKey="UserId", OtherKey="WinnerUserId")]
		public EntitySet<GameResult> GameResults
		{
			get
			{
				return this._GameResults;
			}
			set
			{
				this._GameResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GameScore", Storage="_GameScores", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<GameScore> GameScores
		{
			get
			{
				return this._GameScores;
			}
			set
			{
				this._GameScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TableState", Storage="_TableStates", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<TableState> TableStates
		{
			get
			{
				return this._TableStates;
			}
			set
			{
				this._TableStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TableUser", Storage="_TableUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<TableUser> TableUsers
		{
			get
			{
				return this._TableUsers;
			}
			set
			{
				this._TableUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Table", Storage="_Tables", ThisKey="UserId", OtherKey="LastWinnerUserId")]
		public EntitySet<Table> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Table1", Storage="_Tables1", ThisKey="UserId", OtherKey="OwnerUserId")]
		public EntitySet<Table> Tables1
		{
			get
			{
				return this._Tables1;
			}
			set
			{
				this._Tables1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTableInventories(UserTableInventory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserTableInventories(UserTableInventory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GameResults(GameResult entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GameResults(GameResult entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GameScores(GameScore entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GameScores(GameScore entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TableStates(TableState entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TableStates(TableState entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TableUsers(TableUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TableUsers(TableUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tables1(Table entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Tables1(Table entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableUserCard")]
	public partial class TableUserCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableUserId;
		
		private int _CardId;
		
		private EntityRef<Card> _Card;
		
		private EntityRef<TableUser> _TableUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableUserIdChanging(int value);
    partial void OnTableUserIdChanged();
    partial void OnCardIdChanging(int value);
    partial void OnCardIdChanged();
    #endregion
		
		public TableUserCard()
		{
			this._Card = default(EntityRef<Card>);
			this._TableUser = default(EntityRef<TableUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableUserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TableUserId
		{
			get
			{
				return this._TableUserId;
			}
			set
			{
				if ((this._TableUserId != value))
				{
					if (this._TableUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableUserIdChanging(value);
					this.SendPropertyChanging();
					this._TableUserId = value;
					this.SendPropertyChanged("TableUserId");
					this.OnTableUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CardId
		{
			get
			{
				return this._CardId;
			}
			set
			{
				if ((this._CardId != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardIdChanging(value);
					this.SendPropertyChanging();
					this._CardId = value;
					this.SendPropertyChanged("CardId");
					this.OnCardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_TableUserCard", Storage="_Card", ThisKey="CardId", OtherKey="CardId", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.TableUserCards.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.TableUserCards.Add(this);
						this._CardId = value.CardId;
					}
					else
					{
						this._CardId = default(int);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableUser_TableUserCard", Storage="_TableUser", ThisKey="TableUserId", OtherKey="TableUserId", IsForeignKey=true)]
		public TableUser TableUser
		{
			get
			{
				return this._TableUser.Entity;
			}
			set
			{
				TableUser previousValue = this._TableUser.Entity;
				if (((previousValue != value) 
							|| (this._TableUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableUser.Entity = null;
						previousValue.TableUserCards.Remove(this);
					}
					this._TableUser.Entity = value;
					if ((value != null))
					{
						value.TableUserCards.Add(this);
						this._TableUserId = value.TableUserId;
					}
					else
					{
						this._TableUserId = default(int);
					}
					this.SendPropertyChanged("TableUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableUser")]
	public partial class TableUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableUserId;
		
		private int _TableId;
		
		private int _UserId;
		
		private int _Score;
		
		private bool _IsDominant;
		
		private System.Nullable<bool> _IsTurnPlayer;
		
		private EntitySet<TableUserCard> _TableUserCards;
		
		private EntityRef<User> _User;
		
		private EntityRef<Table> _Table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableUserIdChanging(int value);
    partial void OnTableUserIdChanged();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnIsDominantChanging(bool value);
    partial void OnIsDominantChanged();
    partial void OnIsTurnPlayerChanging(System.Nullable<bool> value);
    partial void OnIsTurnPlayerChanged();
    #endregion
		
		public TableUser()
		{
			this._TableUserCards = new EntitySet<TableUserCard>(new Action<TableUserCard>(this.attach_TableUserCards), new Action<TableUserCard>(this.detach_TableUserCards));
			this._User = default(EntityRef<User>);
			this._Table = default(EntityRef<Table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableUserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TableUserId
		{
			get
			{
				return this._TableUserId;
			}
			set
			{
				if ((this._TableUserId != value))
				{
					this.OnTableUserIdChanging(value);
					this.SendPropertyChanging();
					this._TableUserId = value;
					this.SendPropertyChanged("TableUserId");
					this.OnTableUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL")]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDominant", DbType="Bit NOT NULL")]
		public bool IsDominant
		{
			get
			{
				return this._IsDominant;
			}
			set
			{
				if ((this._IsDominant != value))
				{
					this.OnIsDominantChanging(value);
					this.SendPropertyChanging();
					this._IsDominant = value;
					this.SendPropertyChanged("IsDominant");
					this.OnIsDominantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTurnPlayer", DbType="Bit")]
		public System.Nullable<bool> IsTurnPlayer
		{
			get
			{
				return this._IsTurnPlayer;
			}
			set
			{
				if ((this._IsTurnPlayer != value))
				{
					this.OnIsTurnPlayerChanging(value);
					this.SendPropertyChanging();
					this._IsTurnPlayer = value;
					this.SendPropertyChanged("IsTurnPlayer");
					this.OnIsTurnPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableUser_TableUserCard", Storage="_TableUserCards", ThisKey="TableUserId", OtherKey="TableUserId")]
		public EntitySet<TableUserCard> TableUserCards
		{
			get
			{
				return this._TableUserCards;
			}
			set
			{
				this._TableUserCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TableUser", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TableUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TableUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_TableUser", Storage="_Table", ThisKey="TableId", OtherKey="TableId", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.TableUsers.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.TableUsers.Add(this);
						this._TableId = value.TableId;
					}
					else
					{
						this._TableId = default(int);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TableUserCards(TableUserCard entity)
		{
			this.SendPropertyChanging();
			entity.TableUser = this;
		}
		
		private void detach_TableUserCards(TableUserCard entity)
		{
			this.SendPropertyChanging();
			entity.TableUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Table]")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableId;
		
		private string _TableName;
		
		private int _OwnerUserId;
		
		private System.DateTime _Created;
		
		private bool _Suspended;
		
		private string _Timestamp;
		
		private string _CurrentSuit;
		
		private string _Trump;
		
		private bool _GameStarted;
		
		private int _HandsAccumulated;
		
		private bool _TurnStart;
		
		private System.Nullable<int> _LastWinnerUserId;
		
		private System.Nullable<System.DateTime> _LastWinnerTimestamp;
		
		private EntitySet<UserTableInventory> _UserTableInventories;
		
		private EntitySet<GameResult> _GameResults;
		
		private EntitySet<GameScore> _GameScores;
		
		private EntitySet<TableState> _TableStates;
		
		private EntitySet<TableUser> _TableUsers;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnOwnerUserIdChanging(int value);
    partial void OnOwnerUserIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnSuspendedChanging(bool value);
    partial void OnSuspendedChanged();
    partial void OnTimestampChanging(string value);
    partial void OnTimestampChanged();
    partial void OnCurrentSuitChanging(string value);
    partial void OnCurrentSuitChanged();
    partial void OnTrumpChanging(string value);
    partial void OnTrumpChanged();
    partial void OnGameStartedChanging(bool value);
    partial void OnGameStartedChanged();
    partial void OnHandsAccumulatedChanging(int value);
    partial void OnHandsAccumulatedChanged();
    partial void OnTurnStartChanging(bool value);
    partial void OnTurnStartChanged();
    partial void OnLastWinnerUserIdChanging(System.Nullable<int> value);
    partial void OnLastWinnerUserIdChanged();
    partial void OnLastWinnerTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnLastWinnerTimestampChanged();
    #endregion
		
		public Table()
		{
			this._UserTableInventories = new EntitySet<UserTableInventory>(new Action<UserTableInventory>(this.attach_UserTableInventories), new Action<UserTableInventory>(this.detach_UserTableInventories));
			this._GameResults = new EntitySet<GameResult>(new Action<GameResult>(this.attach_GameResults), new Action<GameResult>(this.detach_GameResults));
			this._GameScores = new EntitySet<GameScore>(new Action<GameScore>(this.attach_GameScores), new Action<GameScore>(this.detach_GameScores));
			this._TableStates = new EntitySet<TableState>(new Action<TableState>(this.attach_TableStates), new Action<TableState>(this.detach_TableStates));
			this._TableUsers = new EntitySet<TableUser>(new Action<TableUser>(this.attach_TableUsers), new Action<TableUser>(this.detach_TableUsers));
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="Int NOT NULL")]
		public int OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suspended", DbType="Bit NOT NULL")]
		public bool Suspended
		{
			get
			{
				return this._Suspended;
			}
			set
			{
				if ((this._Suspended != value))
				{
					this.OnSuspendedChanging(value);
					this.SendPropertyChanging();
					this._Suspended = value;
					this.SendPropertyChanged("Suspended");
					this.OnSuspendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="VarChar(200)")]
		public string Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentSuit", DbType="VarChar(10)")]
		public string CurrentSuit
		{
			get
			{
				return this._CurrentSuit;
			}
			set
			{
				if ((this._CurrentSuit != value))
				{
					this.OnCurrentSuitChanging(value);
					this.SendPropertyChanging();
					this._CurrentSuit = value;
					this.SendPropertyChanged("CurrentSuit");
					this.OnCurrentSuitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trump", DbType="VarChar(10)")]
		public string Trump
		{
			get
			{
				return this._Trump;
			}
			set
			{
				if ((this._Trump != value))
				{
					this.OnTrumpChanging(value);
					this.SendPropertyChanging();
					this._Trump = value;
					this.SendPropertyChanged("Trump");
					this.OnTrumpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameStarted", DbType="Bit NOT NULL")]
		public bool GameStarted
		{
			get
			{
				return this._GameStarted;
			}
			set
			{
				if ((this._GameStarted != value))
				{
					this.OnGameStartedChanging(value);
					this.SendPropertyChanging();
					this._GameStarted = value;
					this.SendPropertyChanged("GameStarted");
					this.OnGameStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandsAccumulated", DbType="Int NOT NULL")]
		public int HandsAccumulated
		{
			get
			{
				return this._HandsAccumulated;
			}
			set
			{
				if ((this._HandsAccumulated != value))
				{
					this.OnHandsAccumulatedChanging(value);
					this.SendPropertyChanging();
					this._HandsAccumulated = value;
					this.SendPropertyChanged("HandsAccumulated");
					this.OnHandsAccumulatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TurnStart", DbType="Bit NOT NULL")]
		public bool TurnStart
		{
			get
			{
				return this._TurnStart;
			}
			set
			{
				if ((this._TurnStart != value))
				{
					this.OnTurnStartChanging(value);
					this.SendPropertyChanging();
					this._TurnStart = value;
					this.SendPropertyChanged("TurnStart");
					this.OnTurnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastWinnerUserId", DbType="Int")]
		public System.Nullable<int> LastWinnerUserId
		{
			get
			{
				return this._LastWinnerUserId;
			}
			set
			{
				if ((this._LastWinnerUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastWinnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._LastWinnerUserId = value;
					this.SendPropertyChanged("LastWinnerUserId");
					this.OnLastWinnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastWinnerTimestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastWinnerTimestamp
		{
			get
			{
				return this._LastWinnerTimestamp;
			}
			set
			{
				if ((this._LastWinnerTimestamp != value))
				{
					this.OnLastWinnerTimestampChanging(value);
					this.SendPropertyChanging();
					this._LastWinnerTimestamp = value;
					this.SendPropertyChanged("LastWinnerTimestamp");
					this.OnLastWinnerTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_UserTableInventory", Storage="_UserTableInventories", ThisKey="TableId", OtherKey="TableId")]
		public EntitySet<UserTableInventory> UserTableInventories
		{
			get
			{
				return this._UserTableInventories;
			}
			set
			{
				this._UserTableInventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_GameResult", Storage="_GameResults", ThisKey="TableId", OtherKey="TableId")]
		public EntitySet<GameResult> GameResults
		{
			get
			{
				return this._GameResults;
			}
			set
			{
				this._GameResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_GameScore", Storage="_GameScores", ThisKey="TableId", OtherKey="TableId")]
		public EntitySet<GameScore> GameScores
		{
			get
			{
				return this._GameScores;
			}
			set
			{
				this._GameScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_TableState", Storage="_TableStates", ThisKey="TableId", OtherKey="TableId")]
		public EntitySet<TableState> TableStates
		{
			get
			{
				return this._TableStates;
			}
			set
			{
				this._TableStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_TableUser", Storage="_TableUsers", ThisKey="TableId", OtherKey="TableId")]
		public EntitySet<TableUser> TableUsers
		{
			get
			{
				return this._TableUsers;
			}
			set
			{
				this._TableUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Table", Storage="_User", ThisKey="LastWinnerUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._LastWinnerUserId = value.UserId;
					}
					else
					{
						this._LastWinnerUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Table1", Storage="_User1", ThisKey="OwnerUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Tables1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Tables1.Add(this);
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerUserId = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTableInventories(UserTableInventory entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_UserTableInventories(UserTableInventory entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
		
		private void attach_GameResults(GameResult entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_GameResults(GameResult entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
		
		private void attach_GameScores(GameScore entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_GameScores(GameScore entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
		
		private void attach_TableStates(TableState entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_TableStates(TableState entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
		
		private void attach_TableUsers(TableUser entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_TableUsers(TableUser entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
	}
	
	public partial class usp_RegisterUserResult
	{
		
		private System.Nullable<int> _UserId;
		
		private string _ErrorCode;
		
		private string _Message;
		
		public usp_RegisterUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorCode", DbType="VarChar(100)")]
		public string ErrorCode
		{
			get
			{
				return this._ErrorCode;
			}
			set
			{
				if ((this._ErrorCode != value))
				{
					this._ErrorCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(200)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this._Message = value;
				}
			}
		}
	}
	
	public partial class usp_ChangePasswordResult
	{
		
		private System.Nullable<System.Guid> _LoginToken;
		
		private string _ErrorCode;
		
		private string _Message;
		
		public usp_ChangePasswordResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginToken", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LoginToken
		{
			get
			{
				return this._LoginToken;
			}
			set
			{
				if ((this._LoginToken != value))
				{
					this._LoginToken = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorCode", DbType="VarChar(100)")]
		public string ErrorCode
		{
			get
			{
				return this._ErrorCode;
			}
			set
			{
				if ((this._ErrorCode != value))
				{
					this._ErrorCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(200)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this._Message = value;
				}
			}
		}
	}
	
	public partial class usp_ListJoinableTablesResult
	{
		
		private int _TableId;
		
		private string _TableName;
		
		private System.Nullable<int> _SlotsAvailable;
		
		private int _UserId;
		
		private string _Username;
		
		public usp_ListJoinableTablesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL")]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					this._TableId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this._TableName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotsAvailable", DbType="Int")]
		public System.Nullable<int> SlotsAvailable
		{
			get
			{
				return this._SlotsAvailable;
			}
			set
			{
				if ((this._SlotsAvailable != value))
				{
					this._SlotsAvailable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this._Username = value;
				}
			}
		}
	}
	
	public partial class usp_ListUserTablesResult
	{
		
		private int _TableId;
		
		private string _TableName;
		
		private System.Nullable<int> _SlotsAvailable;
		
		private int _UserId;
		
		private string _Username;
		
		public usp_ListUserTablesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL")]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					this._TableId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this._TableName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotsAvailable", DbType="Int")]
		public System.Nullable<int> SlotsAvailable
		{
			get
			{
				return this._SlotsAvailable;
			}
			set
			{
				if ((this._SlotsAvailable != value))
				{
					this._SlotsAvailable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this._Username = value;
				}
			}
		}
	}
	
	public partial class usp_CreateTableResult
	{
		
		private System.Nullable<int> _TableId;
		
		private string _TableName;
		
		private int _AvailableSlots;
		
		private int _UserId;
		
		private string _Username;
		
		public usp_CreateTableResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int")]
		public System.Nullable<int> TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					this._TableId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="VarChar(100)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this._TableName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableSlots", DbType="Int NOT NULL")]
		public int AvailableSlots
		{
			get
			{
				return this._AvailableSlots;
			}
			set
			{
				if ((this._AvailableSlots != value))
				{
					this._AvailableSlots = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this._Username = value;
				}
			}
		}
	}
	
	public partial class usp_GetTableTimestampResult
	{
		
		private string _Timestamp;
		
		public usp_GetTableTimestampResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="VarChar(200)")]
		public string Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this._Timestamp = value;
				}
			}
		}
	}
	
	public partial class usp_LogInResult
	{
		
		private System.Nullable<System.Guid> _LoginToken;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _ErrorCode;
		
		private string _Message;
		
		public usp_LogInResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginToken", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LoginToken
		{
			get
			{
				return this._LoginToken;
			}
			set
			{
				if ((this._LoginToken != value))
				{
					this._LoginToken = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(100)")]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this._Firstname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(100)")]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this._Lastname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorCode", DbType="VarChar(100)")]
		public string ErrorCode
		{
			get
			{
				return this._ErrorCode;
			}
			set
			{
				if ((this._ErrorCode != value))
				{
					this._ErrorCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(200)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this._Message = value;
				}
			}
		}
	}
	
	public partial class usp_ListTablesUserIsOnResult
	{
		
		private int _TableId;
		
		private string _TableName;
		
		private System.Nullable<int> _SlotsAvailable;
		
		private int _UserId;
		
		private string _Username;
		
		public usp_ListTablesUserIsOnResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL")]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					this._TableId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this._TableName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotsAvailable", DbType="Int")]
		public System.Nullable<int> SlotsAvailable
		{
			get
			{
				return this._SlotsAvailable;
			}
			set
			{
				if ((this._SlotsAvailable != value))
				{
					this._SlotsAvailable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this._Username = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
